openapi: 3.1.0
info:
  version: 1.0.0
  title: Water Tracker API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: This is a documentation of Water Tracker API
tags:
  - name: Auth
    description: Auth operations.
servers:
  - url: https://nodejs-hw-7-mongodb.onrender.com
  - url: http://localhost:8080
paths:
  /auth/register:
    $ref: './paths/auth/register.yaml'
  /auth/login:
    $ref: './paths/auth/login.yaml'
  /auth/logout:
    $ref: './paths/auth/logout.yaml'
  /auth/refresh:
    $ref: './paths/auth/refresh.yaml'
  /auth/avatar:
    $ref: './paths/auth/avatar.yaml'
  /auth/info:
    $ref: './paths/auth/info.yaml'
  /auth/profile:
    $ref: './paths/auth/profile.yaml'
components:
  responses:
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 401
              message:
                type: string
                example: Unauthorized
    IllegalInput:
      description: Illegal input for operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Entity not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    responses-NotFound:
      description: Entity not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    RegisterUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: password123
    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: 60d0fe4f5311236168a109ca
        email:
          type: string
          example: user@example.com
        name:
          type: string
          example: John Doe
        gender:
          type: string
          example: Man
        dailyNorma:
          type: integer
          example: 1500
        photo:
          type: string
          example: http://example.com/photo.jpg
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 404
        message:
          type: string
          example: Not Found
    LoginUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: password123
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    SuccessResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: Success
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
